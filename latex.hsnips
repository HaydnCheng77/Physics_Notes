# `_`: snippet argument, T: trigger key needed

#-------------------------------------- 
#			  context def			   |
#--------------------------------------

# you don't have to read this unless you are going to customise the math context defined below.

# information below is based on VSCode v1.81.1 and LaTeX Workshop Extensionv9.13.14.

# the scope "support.class.math.block.environment" is, in general, inside \begin \end style math environments such as equation as gather. plus, $ $ and \[ \] also has this scope.
# But the scope for some math environments contains the point outside the environments (i.e., its outer boundary).
# the scope "meta.math.block.latex" is, in general, inside major math environments mentioned above plus \( \).
# this scope also has the boundary-inconsistency mentioned above.
# "punctuation.definition.string.begin.latex" and "punctuation.definition.string.end.latex" are also nuisances. the former (and the latter) could be at, in general, just before and just after a math environment starts (and ends, respectively) but the exact realm of its scope depends on individual math environment used.
# So the math context everyone would agreed upon is the union of these math block minus their boundaries, sacrificing the very first and the last point of some math environments.

# The definition of math contex below is loose in that it does not eliminate "punctuation.definition.string.end.latex" to ensure a wider math environments, taking the risk of the "boundary" problem.
# this definition, in my experience, causes little trouble if you use \( \) and equation (and gather) environment as the primary math environments.
# If you are using $-based math environments, trying a more loose definition would be an option.

# running "Developer: Inspect Editor Tokens and Scopes" yourself in a tex code to help you understand math context.

global
function math(context) {
    return context.scopes.some(s => s.startsWith("support.class.math.block.environment"))
	&& context.scopes.some(s => s.startsWith("meta.math.block.latex"))
	// comment out below if you would like a more loose math context
	&& ! context.scopes.some(s => s.startsWith("punctuation.definition.string.begin.latex"))
	// uncomment below for a more strict math context
	&& ! context.scopes.some(s => s.startsWith("punctuation.definition.string.end.latex"))
	&& ! context.scopes.some(s => s.startsWith("comment"));
}
endglobal

global
function math(context) {
    return  context.scopes.findLastIndex(s => s.startsWith("meta.math")) > context.scopes.findLastIndex(s => s.startsWith("comment") || s.startsWith("meta.text.normal.tex"));
}
endglobal

#-------------------------------------- 
#			  Environment			   |
#--------------------------------------

# lr) -> \left(  \right)
# and similarly for ]>}vV
# v and V correspond to vert and Vert
context math(context)
snippet `lr([\)\]\>\}vV])` " [HS] Left-right" wA
`` trans = {
	")": [
		"(",
		")"
	],
	"]": [
		"[",
		"]"
	],
	">": [
		"<",
		">"
	],
	"}": [
		"\\{",
		"\\\\}"
	],
	"v": [
		"\\lvert",
		"\\rvert"
	],
	"V": [
		"\\lVert",
		"\\rVert"
	]
}
rv = `\\left${trans[m[1]][0]} ${snip.tabstop(1)} \\right${trans[m[1]][1]}` ``
endsnippet

#-------------------------------------- 
#			   Character			   |
#--------------------------------------

# R# -> \mathbb{R}
context math(context)
snippet `\b([A-Z])#` " [HS] Math bb" A
`` rv = `\\mathbb{${m[1]}}` ``
endsnippet

# Acal -> \mathcal{A}
context math(context)
snippet `\b([A-Z])cal` " [HS] Math cal" A
`` rv = `\\mathbb{${m[1]}}` ``
endsnippet

# A@ -> \mathscr{A}
context math(context)
snippet `\b([A-Z])@` " [HS] Math scr" A
`` rv = `\\mathscr{${m[1]}}` ``
endsnippet

# adding # transforms mathbb -> mathcal -> mathscr -> mathbb

# mathbb + # -> mathcal
context math(context)
snippet `\\mathbb{([A-Z])}#` " [HS] mathbb -> mathcal" A
`` rv = `\\mathcal{${m[1]}}` ``
endsnippet

# \mathcal + # -> mathscr
context math(context)
snippet `\\mathcal{([A-Z])}#` " [HS] mathcal -> mathscr" A
`` rv = `\\mathscr{${m[1]}}` ``
endsnippet

# \mathscr + # -> mathbb
context math(context)
snippet `\\mathscr{([A-Z])}#` " [HS] mathscr -> mathbb" A
`` rv = `\\mathbb{${m[1]}}` ``
endsnippet

# \mathbb{R}+ -> \mathbb{R}_+
context math(context)
snippet `(\\mathbb{[A-Z]})(_[+-])?(\^\*)?([+-])` " [HS] Math bb +/- modifier" A
`` rv = m[1] + "_" + m[4] + (m[3] || "") ``
endsnippet

# \mathbb{R}* -> \mathbb{R}^*
context math(context)
snippet `(\\mathbb{[A-Z]})(_[+-])?\*` " [HS] Math bb * modifier" A
`` rv = m[1] + (m[2] || "") + "^*" ``
endsnippet

#-------------------------------------- 
#   Commands & their Abbreviations	  |
#--------------------------------------

# not in -> \notin
# priority is needed to win "\not \in"
# place before snippet in -> \in 
context math(context)
priority 2
snippet `\\not\s(in|ni)` " [HS] Not in Not ni" A
`` rv = `\\not${m[1]} ` ``
endsnippet

# ad-hoc solution for \int: rewrite \in t -> \int
context math(context)
priority 2
snippet `\\in\st` "[HS] Integral" A
\\int 
endsnippet

# ad-hoc solution for \inf: rewrite \in f -> \inf
context math(context)
priority 2
snippet `\\in\sf` "[HS] Infimum" A
\\infty
endsnippet

# ad-hoc solution for \interior: rewrite \int e -> \interior
context math(context)
priority 2
snippet `\\int\se` "[HS] Interior" A
\\interior 
endsnippet

# ad-hoc solution for \supp: rewrite \sup p -> \supp
context math(context)
priority 2
snippet `\\sup\sp` "[HS] Support" A
\\supp 
endsnippet

# \sim + eq -> \simeq
context math(context)
priority 2
snippet `\b(?<=\\)(sim|subset|supset|succ|prec)\s{1,2}(neq|eq)` " [HS] \\commands + (n)eq" A
``rv = `${m[1]}${m[2]} ` ``
endsnippet

# ker -> \ker
context math(context)
priority 1
snippet `\b(?<!\\)(?<!\\mathrm\{)(le|ge|to|not|in|sup|dim|deg|ker|range|rot|Div|rank|diag|det|equiv|arg|max|min|argmax|argmin|sin|cos|tan|cot|ln|log|exp|perp|cup|cap|sim|pm|iff|mid|succ|prec|neq|ni|const)` " [HS] Commands space" A
`` rv = `\\${m[1]} ` ``
endsnippet

# imp ->  \implies
context math(context)
snippet `\b(?<!\\)(?<!\\mathrm\{)(lhs|rhs|imp|imb|uuto|ddto|ssb|ssp|sbn|stm|app|oo|mpt|ee|fa|xx|oxx|o\+|opx|dom|codom|tr|codim|Div|lra|Lra)` " [HS] Abbreviations for Commands" A
`` trans = {
	"lhs":"\\LHS",
	"rhs":"\\RHS",
	"imp": "\\implies",
	"imb": "\\impliedby",
	"ssb": "\\subset",
	"ssp": "\\supset",
	"stm": "\\setminus",
	"ee": "\\exists",
	"fa": "~~~\\forall~",
	"mpt": "\\mapsto",
	"uuto": "\\upuparrows",
	"ddto": "\\downdownarrows",
	"lra": "\\leftrightarrow",
	"Lra": "\\Leftrightarrow",
	"oo": "\\infty",
	"app": "\\approx",
	"xx": "\\times",
	"oxx": "\\otimes",
	"opx": "\\oplus",
	"o+": "\\oplus", // alias
	"dom":"\\Dom",
	"codom":"\\CoDom",
	"tr":"\\Tr",
	"codim":"\\CoDim",
	//"":"\\",
}
rv = `${trans[m[1]]} ` ``
endsnippet

# xto -> \xrightarrow{}
context math(context)
snippet `\b(?<!\\)(?<!\\mathrm\{)(xto|xot|ovl|mrm|eqby)` " [HS] Abbreviations for Commands with argument" A
`` trans = {
	"xto": "\\xrightarrow",
	"xot": "\\xleftarrow",
	"ovl": "\\overline",
	"mrm": "\\mathrm",
	"eqby": "\\equalby",
}
rv = `${trans[m[1]]}{${snip.tabstop(1)}} ${snip.tabstop(2)}` ``
endsnippet

# ff -> frac{}{}
context math(context)
snippet `\b(?<!\\)(?<!\\mathrm\{)(uset|oset|ff)` " [HS] Abbreviations for Commands with two argument" A
`` trans = {
	"uset": "\\underset",
	"oset": "\\overset",
	"ff": "\\frac"
}
rv = `${trans[m[1]]}{${snip.tabstop(1)}}{${snip.tabstop(2)}} ${snip.tabstop(3)}` ``
endsnippet

# asin -> \arcsin {}
context math(context)
snippet `\b(?<!\\)a(sin|cos|tan)` " [HS] Arc-trigo" A
`` rv = `\\arc${m[1]} {${snip.tabstop(1)}} ${snip.tabstop(2)}` ``
endsnippet

#-------------------------------------- 
#	    subscript and superscript	   |
#--------------------------------------


# x1 -> x_1
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])(\d)` " [HS] Auto subscript" A
`` rv = m[1] + "_" + m[2] ``
endsnippet

# x11 -> x_{11}
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])_(\d\d)` " [HS] Auto subscript 2" A
`` rv = `${m[1]}_{${m[2]}}` ``
endsnippet

# xNN -> x_n
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])([A-Z])\2` " [HS] a_k" A
`` rv = `${m[1]}_${m[2].toLowerCase()}` ``
endsnippet

# xIImk -> x_{i-k}
# xIIpk -> x_{i+k}
context math(context)
priority 2
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])_([0-9a-zA-Z\_\{\}\-\+\*])(m|p)([0-9a-z])` " [HS] _{k-d}" A
`` trans = {"m": "-", "p": "+"}
rv = `${m[1]}_{${m[2]}${trans[m[3]]}${m[4]}}` ``
endsnippet

# convert subscript into superscript, and conversely
# x_{i+1}tt -> x^{i+1}
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[\\A-Za-z])(_|\^)([0-9a-zA-Z\\\_\{\}\(\)\-\+\*]+)tt` " [HS] x_k -> x^k" A
`` trans = {"_": "^", "^": "_"}
rv = `${m[1]}${trans[m[2]]}${m[3]}` ``
endsnippet

#-------------------------------------- 
#				Dots				   |
#--------------------------------------

# x_{i+1},, -> x_{i+1}, \\cdots, x_{i+1}
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[\\A-Za-z])(\_|\^)([0-9a-zA-Z\\\_\{\}\(\)\-\+\*]+),,` " [HS] repeat by ldots" wA
`` rv = `${m[1]}${m[2]}${m[3]}, \\ldots, ${m[1]}${m[2]}${m[3]}` ``
endsnippet

# .. -> \ldots
context math(context)
snippet `\b(?<!\\)\.{2}` " [HS] ldots" A
\\ldots
endsnippet

context math(context)
snippet `\b(?<!\\),\.` " [HS] Ldots with comma" A
, \\ldots, 
endsnippet

# sd + [dvlc](dot type) -> \\(dot type)dots
# sdc -> \cdots
context math(context)
snippet `\b(?<!\\)sd([dvlc])` " [HS] cdots" iA
`` rv = `\\${m[1]}dots` ``
endsnippet

context math(context)
snippet `\b(?<!\\)dc` " [HS] cdot" iA
\\cdot 
endsnippet

#-------------------------------------- 
#		      Suggestion			   |
#--------------------------------------

# "_" : modest suggestion
# "^" : aggressive suggestion  

# --------- suggestion on "_" ---------

context math(context)
snippet `\\prod\s?_` " [HS] Product" A
\\prod_{${1:i}=${2:1}}
endsnippet

context math(context)
snippet `\\int\s?_` " [HS] Integral" A
\\int_{$1}
endsnippet

context math(context)
snippet `\\lim\s?_` " [HS] Limit" A
\\lim_{${1:x} \\to ${2:\infty}} 
endsnippet

# --------- suggestion on "^" ---------

# \\sum^ -> \\sum_{i=1}^{\infty}
context math(context)
snippet `\\sum\s?\\^` " [HS] Sum" wA
\\sum_{${1:i}=${2:1}}^{${3:\\infty}} 
endsnippet

context math(context)
snippet `\\prod\s?\^` " [HS] Product" wA
\\prod_{${1:i}=${2:1}}^{${3:n}} 
endsnippet

context math(context)
snippet `\\to\s?\^` " [HS] Arrow limit" wA
\\xrightarrow{${1:x} \\to ${2:\infty}}
endsnippet

context math(context)
snippet `\\int\s?\^` " [HS] Integral" wA
\\int_{${1:-\\infty}}^{${2:\\infty}} 
endsnippet

# --------- auto fraction and sqrt ---------

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\w+\}|\w))*)\/$|(\(((?:\([^()]*\)|[^()])*)\))\/$` " [HS] Fraction auto" A
\\frac{`` rv = m[1] || m[10] ``}{$1} $0
endsnippet

context math(context)
snippet `\((((?:\([^()]*\)|[^()])*))\)rt` " [HS] Square root auto" A
\\sqrt{`` rv = m[1] ``}
endsnippet

context math(context)
snippet `\\sqrt(?:\[\d\])?\{(.*)\}(\d)` " [HS] N root auto / modify N" A
\\sqrt[`` rv = m[2] ``]{`` rv = m[1] ``}
endsnippet

#-------------------------------------- 
#	  Experimental: UTF-characters	   |
#--------------------------------------

snippet `todo` "todo" wA
\todo{$1} $0
endsnippet

snippet `href` "hyper reference" wA
\href{$1}{${2:here}} $0
endsnippet

snippet `(?<![\\a-zA-Z])(ne)` "new equation" b
\begin{equation}
	$1
\end{equation}

$0
endsnippet

snippet `ca` "cases" b
\begin{cases}
	$1,& $2,\\\
	$3,& $4.
\end{cases}
$0
endsnippet

snippet `cref` "reference" iA
\cref{$1} $0
endsnippet

priority 10
snippet `(?<![\\a-zA-Z])(tem)` "template" b
\documentclass[english,a4paper,12pt]{report}
\usepackage{mypackage}

\title{$1}

\author{Haydn Cheng}

\date{\today}

\begin{document}
\maketitle
\tableofcontents
	
\chapter{$2}

$0

\end{document}
endsnippet

snippet `sec` "section" b
\section{$1}

$0
endsnippet

snippet `chap` "chapter" b
\chapter{$1}

$0
endsnippet

snippet `subsec` "subsection" bA
\subsection{$1}

$0
endsnippet

context math(context)
snippet `ali` "Align" bA
\begin{aligned}
	$1
\end{aligned}
endsnippet

priority 10
snippet `enum` "enumerate" bA
\begin{enumerate}
	\item $1
\end{enumerate}
$0
endsnippet

priority 100
snippet `mathenum` "math enumerate" bA
\begin{enumerate}[label=($1\arabic*)]
	\item $2
\end{enumerate}
$0
endsnippet


priority 100
snippet `item` "itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet `elfur` "further practice" bA
\furtherprac{Griffiths 5th ed. Problem $1}{$2}
$0
endsnippet

snippet `exam` "example" b
\example{$1}
{$2}
{$3} 
$0
endsnippet

snippet `elex` "Electric example" bA
\begin{example_template}
	\textbf{Example:} \textbf{Griffths \(5^\text{th}\) ed. Problem $1} \newline \newline
	\textbf{Question:} $2 \newline \newline
	\textbf{Solution:} $3 
\end{example_template}
$0
endsnippet

snippet `(?<![\\a-zA-Z])(nl)` "newline" wA
\newline $0
endsnippet


snippet `([1-9]{1})\ ([1-9]{1})(table)` "matrix" iwA
\begin{table}[H]
	\centering
	\begin{tabular}{``
	let len = m[2];
	let results = "";
	for(var i=0; i<len-1; i++){
		results += "c|"
	}
	results += "c";
	rv = results;
	``}
	    \toprule
			``
			let order = 1;
			nrow = m[1];
			ncol = m[2];
			for (var i=0; i<nrow-1; i++){
				for(var j = 0;j <ncol-1;j++){
					rv += `${snip.tabstop(order+3)} & `;
					order ++;
				}	
				rv += ` ${snip.tabstop(order+3)} \\\\`+ `\\`+ `\n`;
				order ++;
				if(i == 0){
					rv += `		\\midrule` + `\n`;
				}
				rv += `			`;
			}	
			for(var j = 0;j <ncol-1;j++){
				rv += `${snip.tabstop(order+3)} & `;
				order ++;
			}
			rv += ` ${snip.tabstop(order+3)} \\\\` + `\\`;
			``
    	\bottomrule
	\end{tabular}
	\caption{${2:caption}}
	\label{tab:${3:label}}
\end{table}
endsnippet

context math(context)
snippet `ary([1-9]{1})\ ([1-9]{1})` "Array environment" ibA
\begin{array}{``
	let len = m[2];
	let results = "";
	for(var i=0; i<len; i++){
		results += "c"
	}
	rv = results;
	``}
	``
	let order = 1;
	let nrow = m[1];
	let ncol = m[2];
	for (var i=0; i<nrow-1; i++){
		for(var j = 0;j <ncol-1;j++){
			rv += `${snip.tabstop(order)} & `;
			order ++;
		}
		rv += ` ${snip.tabstop(order)} \\\\`+ `\\`+ `\n` + `	`;
		order ++;
	}
	for(var j = 0;j <ncol-1;j++){
		rv += `${snip.tabstop(order)} & `;
		order ++;
	}
	rv += ` ${snip.tabstop(order)} \\\\`+ `\\`;
	``
\end{array}
endsnippet


context math(context)
snippet `([1-9]{1})\ ([1-9]{1})(b|p|v)mat` "matrix" iwA
\begin{``rv = m[3]``matrix}``
	let order = 3;
	let nrow = m[1];
	let ncol = m[2];
	rv = `\n`;
	for (var i=0; i<nrow; i++){
		rv += '	';
		for(var j = 0;j <ncol-1;j++){
			rv += `${snip.tabstop(order)} & `;
			order ++;
		}
		rv += ` ${snip.tabstop(order)} \\\\`+ `\\`+ `\n`;
		order ++;
	}
	``\end{``rv = m[3]``matrix}$0
endsnippet

context math(context)
snippet `mu` "\mu" A
\mu $0
endsnippet

context math(context)
snippet `alpha` "\alpha" A
\alpha $0
endsnippet

context math(context)
snippet `sig` "\sigma" A
\sigma $0
endsnippet

context math(context)
snippet `Sig` "\Sigma" A
\Sigma $0
endsnippet

context math(context)
snippet `rho` "\rho" A
\rho $0
endsnippet

context math(context)
snippet `beta` "\beta" A
\beta $0
endsnippet

context math(context)
snippet `gam` "\gamma" A
\gamma $0
endsnippet

context math(context)
snippet `Gam` "\Gamma" A
\Gamma $0
endsnippet

context math(context)
snippet `del` "\delta" A
\delta $0
endsnippet

context math(context)
snippet `Del` "\Delta" A
\Delta $0
endsnippet

context math(context)
snippet `zeta` "\zeta" A
\zeta $0
endsnippet

context math(context)
snippet `eta` "\eta" A
\eta $0
endsnippet

context math(context)
snippet `the` "\theta" A
\theta $0
endsnippet

context math(context)
snippet `vthe` "\vartheta" A
\vartheta $0
endsnippet

context math(context)
snippet `The` "\Theta" A
\Theta $0
endsnippet

context math(context)
snippet `tau` "\tau" A
\tau $0
endsnippet

context math(context)
snippet `iota` "\iota" A
\iota $0
endsnippet

priority 100000
context math(context)
snippet `kap` "\kappa" A
\kappa $0
endsnippet

context math(context)
snippet `lam` "\lambda" A
\lambda $0
endsnippet

context math(context)
snippet `Lam` "\Lambda" A
\Lambda $0
endsnippet

context math(context)
snippet `nu` "\nu" A
\nu $0
endsnippet

context math(context)
snippet `nabla` "\nabla" iA
\nabla $0
endsnippet

context math(context)
snippet `pi` "\pi" A
\pi $0
endsnippet

context math(context)
snippet `Pi` "\Pi" A
\Pi $0
endsnippet

context math(context)
snippet `rho` "\rho" A
\rho $0
endsnippet

context math(context)
snippet `tau` "\tau" A
\tau $0
endsnippet

context math(context)
snippet `ups` "\upsilon" A
\upsilon $0
endsnippet

context math(context)
snippet `Ups` "\Upsilon" A
\Upsilon $0
endsnippet

priority 10
context math(context)
snippet `phi` "\varphi" A
\varphi $0
endsnippet


context math(context)
snippet `Phi` "\Phi" A
\Phi $0
endsnippet

priority 100
context math(context)
snippet `vphi` "\phi" A
\phi $0
endsnippet

context math(context)
snippet `chi` "\chi" A
\chi $0
endsnippet

priority 300
context math(context)
snippet `psi` "\psi" A
\psi $0
endsnippet

priority 300
context math(context)
snippet `Psi` "\Psi" A
\Psi $0
endsnippet

context math(context)
snippet `ome` "\omega" A
\omega $0
endsnippet

context math(context)
snippet `Ome` "\Omega" A
\Omega $0
endsnippet

context math(context)
snippet `xi` "\xi" A
\xi $0
endsnippet

context math(context)
snippet `Xi` "\Xi" A
\Xi $0
endsnippet

context math(context)
snippet `eps` "\epsilon" iA
\epsilon $0
endsnippet

priority 200
context math(context)
snippet `veps` "\vepsilon" iA
\varepsilon $0
endsnippet

priority 10000
context math(context)
snippet `ff` "Fraction" iA
\frac{$1}{$2} $0
endsnippet

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" A
\frac{``rv = m[1]``}{$1}$0
endsnippet

snippet `^.*\)/` "Fraction with ()" Am
``
    let str = m[0];
    str = str.slice(0, -1);
    let lastIndex = str.length - 1;

    let depth = 0;
    let i = str.length - 1;

    while (true) {
        if (str[i] == ')') depth += 1;
        if (str[i] == '(') depth -= 1;
        if (depth == 0) break;
        i -= 1;
    }

    let results = str.slice(0, i) + "\\frac{" + str.slice(i+1, -1) + "}";
    rv = results;
	rv += `{${snip.tabstop(1)}}${snip.tabstop(0)}`;
    ``
endsnippet

context math(context)
snippet `>=|(?<!\\)geq` "greater or equal to" A
\geq $0
endsnippet

context math(context)
snippet `<=|(?<!\\)leq` "less or equal to" A
\leq $0
endsnippet

context math(context)
snippet `!=|(?<!\\)noeq` "not equal" A
\neq $0
endsnippet


context math(context)
snippet `bar` "bar" A
\overline{$1} $0
endsnippet

priority 10
context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(bar)` "bar" A
\overline{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(sq)` "sqrt" A
\sqrt{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `til` "tilde" A
\tilde{$1} $0
endsnippet

priority 200
context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(til)` "tilde" A
\tilde{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(hat)` "hat" A
\vu{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(dag)` "dagger" A
``rv = m[1]``^{\dagger} $0
endsnippet

context math(context)
snippet `dag` "dagger" wA
{$1}^{\dagger} $0
endsnippet

priority 10
context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(dot)` "dot" A
\dot{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(dodot)` "double dot" A
\ddot{``rv = m[1]``} $0
endsnippet


context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(vec)` "vector" A
\vb{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `(\\?[1-9]\w*|\\[^(^\s]+\})(vec)` "vector" A
\vb{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `(\\?[1-9]\w*|\\[^(^\s]+\})(hat)` "hat" A
\vu{``rv = m[1]``} $0
endsnippet

priority 10
context math(context)
snippet `(\\?[1-9]\w*|\\[^(^\s]+\})(vec)` "vector" A
\vb{``rv = m[1]``} $0
endsnippet

priority 10
context math(context)
snippet `(\\?[a-zA-Z])\1` "vector" iA
\vb{``rv = m[1]``} $0
endsnippet

priority 10
context math(context)
snippet `(\\?[a-zA-Z])(\d)` "auto subscript" A
``rv = m[1]``_``rv = m[2]`` $0
endsnippet

context math(context)
snippet `avg` "average" iA
\left \langle {$1} \right \rangle $0
endsnippet


snippet `1fig` "figure" bA
\onefig{$1}{${2:scale=0.3}} $0
endsnippet

snippet `2fig` "2 figures" wA
\twofig{$1}{${2:width=\textwidth}}{$3}{${4:width=\textwidth}}{$5} $0
endsnippet

snippet `3fig` "3figures" wA
\threefig{$1}{${2:width=\textwidth}}{$3}{${4:width=\textwidth}}{$5}{${6:width=\textwidth}}{$7} $0
endsnippet

snippet `4fig` "4figures" wA
\fourfig{$1}{${2:width=\textwidth}}{$3}{${4:width=\textwidth}}{$5}{${6:width=\textwidth}}{$7}{${8:width=\textwidth}}{$9} $0
endsnippet

snippet `mk` "inline Math" wA
\(${1}\)``
let test = t[1][0];
if (test != ',' &&  test != '.' &&  test != '-' && test !='?' && test !=' '){
	rv = ' ';
}
else{
	rv = '';
}``$0
endsnippet


context math(context)
snippet `abs` "abs value" iA
\abs{$1} $0
endsnippet

context math(context)
snippet `sum` "sum" wA
\sum_{${1:i}=${2:1}}^{${3:n}} $0
endsnippet

priority 10000
context math(context)
snippet `prod` "product" wA
\prod_{${1:i}=${2:1}}^{${3:n}} $0
endsnippet

context math(context)
snippet `(?<!\\)lim` "limit" A
\lim_{${1:x} \to ${2:0}} $0
endsnippet

context math(context)
snippet `par` "\partial" iA
\partial $0
endsnippet

priority 10
context math(context)
snippet `pdf` "partial dy/dx" iA
\frac{\partial ${1:y}}{\partial ${2:x}} $0
endsnippet

priority 100
context math(context)
snippet `fpdf` "fixed partial dy/dx" iA
\left( \frac{\partial ${1:y}}{\partial ${2:x}} \right)_{$3} $0
endsnippet

priority 100
context math(context)
snippet `2pdf` "second partial dy/dx" iA
\frac{\partial^2 ${1:y}}{\partial ${2:x^2}} $0
endsnippet

priority 10
context math(context)
snippet `df` "dy/dx" iA
\frac{d${1:y}}{d${2:x}} $0
endsnippet

priority 100
context math(context)
snippet `2df` "second dy/dx" iA
\frac{d^2${1:y}}{d${2:x}^2} $0
endsnippet

context math(context)
snippet `when` "when" wA
\text { when } $0
endsnippet

context math(context)
snippet `and` "and" wA
\text { and } $0
endsnippet

priority 10000
context math(context)
snippet `mand` "mand" wA
~\text { and }~ $0
endsnippet

context math(context)
snippet `or` "or" wA
\text { or } $0
endsnippet

context math(context)
snippet `if` "if" wA
\text { if } $0
endsnippet

context math(context)
snippet `to` "to" wA
\text { to } $0
endsnippet

context math(context)
snippet `for` "for" wA
\text { for } $0
endsnippet

context math(context)
snippet `eval` "evaluated at" wA
\eval{$1}_{$2}^{$3} $0
endsnippet

context math(context)
snippet `(?<!\\)sq` "\sqrt{}" A
\sqrt{${1}} $0
endsnippet

context math(context)
snippet `inf` "infinity" iA
\infty $0
endsnippet

priority 100000
context math(context)
snippet `tt` "text" iA
\text{$1} $0
endsnippet

context math(context)
snippet `sa` "inverse" iA
^{-1} $0
endsnippet

context math(context)
snippet `sf` "^3" iA
^3 $0
endsnippet

priority 100
context math(context)
snippet `ss` "^" iA
^{$1} $0
endsnippet

context math(context)
snippet `sub` "subscript" iA
_{$1} $0
endsnippet

context math(context)
snippet `sd` "squared" iA
^2
endsnippet

context math(context)
snippet `cro` "cross product" iA
\cross $0
endsnippet

context math(context)
snippet `dint` "integral" iA
\int_{$1}^{$2} ${3} $0
endsnippet

context math(context)
snippet `fint` "integral" iA
\int_{-\infty}^{+\infty} ${3} $0
endsnippet

context math(context)
snippet `oint` "loop integral" iA
\oint_{$1} $0
endsnippet

context math(context)
snippet `(?<!\\)(sin|cos|tan|cot|csc|sec|ln|log|exp|perp|inf|int)` "general" wA
\\``rv = m[1]`` $0
endsnippet

context math(context)
snippet `(?<!\\)a(sin|cos|tan|cot|csc|sec)` "arc-trigonometry" wA
\\arc``rv = m[1]`` $0
endsnippet

context math(context)
snippet `(\\?\w+)bo` "bold" A
\boldsymbol{``rv = m[1]``} $0
endsnippet

context math(context)
snippet `bo` "bold" A
\boldsymbol{$1} $0
endsnippet

context math(context)
snippet `dot` "dot product" iA
\cdot $0
endsnippet

priority
context math(context)
snippet `td` "time derivates" iA
\dot{$1} $0
endsnippet

priority 10000
context math(context)
snippet `2td` "second time derivates" iA
\ddot{$1} $0
endsnippet

context math(context)
snippet `(?<![1-9])(pm)` "plus or minus" wA
\pm ~ $0
endsnippet

priority 10000
context math(context)
snippet `ap` "approximately equals" wA
\approx $0
endsnippet

context math(context)
snippet `prop` "proportional" iA
\propto $0
endsnippet

context math(context)
snippet `>>` ">>" iA
\gg $0
endsnippet

context math(context)
snippet `<<` "<<" iA
\ll $0
endsnippet

snippet `lb` "label" iA
\label{$1} $0
endsnippet

snippet `ft` "footnote" i
\footnote{$1} $0
endsnippet

priority 10
context math(context)
snippet `rj` "rcurs" iA
\rcurs $0
endsnippet

priority 100
context math(context)
snippet `brj` "brcurs" iA
\brcurs $0
endsnippet

priority 100
context math(context)
snippet `hrj` "hrcurs" iA
\hrcurs $0
endsnippet

priority 10000
context math(context)
snippet `grad` "gradient" wA
\grad{$1} $0
endsnippet

priority 10000
context math(context)
snippet `curl` "curl" wA
\curl{$1} $0
endsnippet

priority 10000
context math(context)
snippet `div` "divergence" wA
\div{$1} $0
endsnippet

priority 100000
context math(context)
snippet `pgrad` "primed gradient" wA
\boldsymbol{\nabla}' $0
endsnippet

priority 100000
context math(context)
snippet `pcurl` "primed curl" wA
\boldsymbol{\nabla}' \cross $0
endsnippet

priority 100000
context math(context)
snippet `pdiv` "primed divergence" wA
\boldsymbol{\nabla}' \cdot $0
endsnippet

priority 100000
context math(context)
snippet `lap` "laplacian" wA
\laplacian $0
endsnippet

context math(context)
snippet `emph` "emphasis" wA
\emph{$1} $0
endsnippet

context math(context)
snippet `se` "exponential" wA
e^{$1} $0
endsnippet

context math(context)
snippet `Re` "real part" wA
\mathfrak{Re} ($1) $0
endsnippet

context math(context)
snippet `Im` "imaginary part" wA
\mathfrak{Im} ($1) $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])(rar)` "rightarrow" wA
\rightarrow $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])(lar)` "leftarrow" wA
\leftarrow $0
endsnippet

snippet `(?<![\\a-zA-Z])(ie)` "ie" wA
\textit{i.e.,} $0
endsnippet

snippet `(?<![\\a-zA-Z])(eg)` "eg" wA
\textit{e.g.,} $0
endsnippet

snippet `etc` "etc" wA
\textit{etc.} $0
endsnippet

priority 100
context math(context)
snippet `hbar` "hbar" wA
\hbar $0
endsnippet

snippet `iten` "item" wA
\item $0
endsnippet

priority 100
context math(context)
snippet `verdot` "vertical dots" wA
\vdots $0
endsnippet

priority 100
context math(context)
snippet `didot` "lower diagonal dots" wA
\ddots $0
endsnippet

priority 1000
context math(context)
snippet `udidot` "upper diagonal dots" wA
\iddots $0
endsnippet

priority 100
context math(context)
snippet `hdot` "horizontal dots" wA
\cdots $0
endsnippet

priority 100
context math(context)
snippet `ldot` "lower horizontal dots" wA
\ldots $0
endsnippet

snippet `(?<![\\a-zA-Z])(def)` "definition" w
\begin{definition}
$1
\end{definition}
$0
endsnippet

snippet `(?<![\\a-zA-Z])(lem)` "lemma" w
\begin{lemma}
$1
\end{lemma}
$0
endsnippet

snippet `(?<![\\a-zA-Z])(cor)` "corpllary" w
\begin{corollary}
$1
\end{corollary}
$0
endsnippet

snippet `(?<![\\a-zA-Z])(pro)` "proof" w
\begin{proof}
$1
\end{proof}
$0
endsnippet

snippet `(?<![\\a-zA-Z])(theo)` "theorem" w
\begin{theorem}
$1
\end{theorem}
$0
endsnippet

context math(context)
snippet `==` "text on equal sign" wA
\stackrel{$1}{=} $0
endsnippet

priority 1000
context math(context)
snippet `iaof` "if and only if" wA
\iff $0
endsnippet

context math(context)
snippet `(vec)(\\?[a-zA-Z]\w*|\\[^(^\s]+\})` "vector set" A
\vb{``rv = m[2]``}_1, \ldots, \vb{``rv = m[2]``}_n $0
endsnippet

context math(context)
snippet `(\\?[a-zA-Z]\w*|\\[^(^\s]+\})(th)` "th" A
``rv = m[1]``^{\text{th}} $0
endsnippet

context math(context)
snippet `hat` "hat" w
\hat{$1} $0
endsnippet

context math(context)
snippet `(hat)(\\?[a-zA-Z]\w*|\\[^(^\s]+\})` "hat" A
\hat{``rv = m[2]``} $0
endsnippet

priority 100
context math(context)
snippet `sb` "subset" wA
\subset $0
endsnippet

context math(context)
snippet `space` "space" wA
~~~ $0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])(id)` "identity map" wA
\mathrm{id}_{${1:X}} $0
endsnippet

context math(context)
snippet `cir` "composition" wA
\circ $0
endsnippet

priority 100
context math(context)
snippet `suo` "sub1" wA
_1 $0
endsnippet

priority 100
context math(context)
snippet `sut` "sub2" wA
_2 $0
endsnippet

priority 100
context math(context)
snippet `sj` "subj" wA
_{j} $0
endsnippet

context math(context)
snippet `times` "times" wA
\times $0
endsnippet

context math(context)
snippet `under` "underbrace" wA
\underbrace{$1}_{\text{$2}}
endsnippet

context math(context)
snippet `sec` "section" w
\section{$1}

$0
endsnippet

context math(context)
snippet `Vout` "V out" wA
V_{\text{out}} $0
endsnippet

context math(context)
snippet `Vin` "V in" wA
V_{\text{in}} $0
endsnippet

priority 10000
context math(context)
snippet `bali` "begin aligned" wA
\begin{aligned} $0
endsnippet

priority 10000
context math(context)
snippet `eali` "end aligned" wA
\end{aligned} $0
endsnippet

context math(context)
snippet `sp` "space" wA
~~~ $0
endsnippet

context math(context)
snippet `comb` "coulumb's constant" wA
\frac{1}{4\pi \epsilon_0} $0
endsnippet

context math(context)
snippet `bio` "biot-savart constant" wA
\frac{\mu_0}{4\pi} $0
endsnippet

priority 10000
context math(context)
snippet `eo` "epsilon_0" wA
\epsilon_0 $0
endsnippet

context math(context)
snippet `dis` "display style" wA
\displaystyle $0
endsnippet

priority 10000
context math(context)
snippet `mo` "mu_0" wA
\mu_0 $0
endsnippet

context math(context)
snippet `quad` "quad" wA
\quad $0
endsnippet

context math(context)
snippet `bra` "bra" wA
\bra{$1} $0
endsnippet

context math(context)
snippet `ket` "ket" wA
\ket{$1} $0
endsnippet

priority 1000
context math(context)
snippet `bk` "braket" wA
\braket{$1}{$2} $0
endsnippet

priority 10000
context math(context)
snippet `abk` "abraket" wA
\bra{$1}{$2}\ket{$3} $0
endsnippet

context math(context)
snippet `SI` "SI unit" wA
\SI{$1}{$2} $0
endsnippet

context math(context)
snippet `nm` "norm" wA
\lVert $1 \rVert $0
endsnippet

context math(context)
snippet `el` "ell" wA
\ell $0
endsnippet